#!/usr/bin/env php
<?php

use OxidProfessionalServices\OxidConsole\Core\Application;


function shutdown() {
    $error = error_get_last();
    if ($error['type'] === E_ERROR) {
        // fatal error has occured
        $trace = array_reverse($GLOBALS['dbg_stack']);
        array_pop($trace);

        echo 'Backtrace for: \'' . $error['message'] . '\' at ' . $error['file'] . ':' . $error['line'] . ':' . "\n";
        foreach($trace as $item) {
           echo '  ' . (isset($item['file']) ? $item['file'] : '<unknown file>')
           . ':' . (isset($item['line']) ? $item['line'] : '<unknown line>')
           . ' calling ' . $item['function'] . '()' . "\n";
        }
    }
}
register_shutdown_function('shutdown');
function write_dbg_stack() {
    $GLOBALS['dbg_stack'] = debug_backtrace();
}
register_tick_function('write_dbg_stack');
declare(ticks=1);
//using the console is for developers
//all errors should be shown to them
ini_set('display_error',1);
$binFolder = dirname($argv[0]);
$autoloadFile = $binFolder.'/../autoload.php';

require_once $autoloadFile;
$projectRoot = realpath(dirname(dirname($binFolder)));

$application = new Application($projectRoot);
$application->run();
