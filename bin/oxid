#!/usr/bin/env php
<?php

/**
 * @copyright OXID eSales AG, All rights reserved
 * @author OXID Professional services
 *
 * See LICENSE file for license details.
 */

use Symfony\Component\Console\Application;
use OxidProfessionalServices\OxidConsole\Core\CommandCollector;
use OxidProfessionalServices\OxidConsole\Core\Composer\VersionHelper;

function loadBootstrap() {
    $possiblePathsForBootstrap = [
        implode(DIRECTORY_SEPARATOR, [__DIR__, '..', '..', '..', 'source', 'bootstrap.php']),
        implode(DIRECTORY_SEPARATOR, [__DIR__, '..', '..', '..', '..', 'source', 'bootstrap.php']),
        implode(DIRECTORY_SEPARATOR, ['', 'var', 'www', 'oxideshop', 'source', 'bootstrap.php']),
    ];

    if (($customPathToBootstrap = getenv('BOOTSTRAP_PATH')) !== false)
        array_unshift($possiblePathsForBootstrap, $customPathToBootstrap);

    foreach ($possiblePathsForBootstrap as $fileToRequire) {
        if (file_exists($fileToRequire)) {
            require_once $fileToRequire;
            break;
        }
    }

    if (!defined('VENDOR_PATH')) {
        echo "Unable to locate valid 'bootstrap.php' in order to load OXID eShop framework.\n";
        echo "Please specify 'BOOTSTRAP_PATH' as environmental variable to use it directly.\n";
        exit(1);
    }
}

try {
    /*
     * TODO code above is to be replaced by:
     */

    loadBootstrap();

    $v = new VersionHelper;
    $version = $v->getVersion('oxid-professional-services/oxid-console');

    //adding a value to avoid php warnings when oxid core try to compare that value
    $_SERVER['HTTP_HOST'] = 'localhost';

    $commandCollector = new CommandCollector();
    $application = new Application('OXID Console', $version);
    $application->addCommands($commandCollector->getAllCommands());
    $application->run();
} catch (Throwable $ex) {
    //console should print errors always
    print $ex->getMessage();
    //print $ex->getTraceAsString();
    $i = 0;
    foreach ($ex->getTrace() as $frame) {
        echo sprintf("#%d %s(%d): %s(%s)\n",
            $i++, $frame["file"], $frame["line"],
            $frame["function"],
            implode(", ", array_map(
                function ($e) { return var_export($e, true); }, $frame["args"])));
    }
    //shop exception hanlder may tke care about error code and logging
    throw $ex;
}