#!/usr/bin/env php
<?php

use OxidProfessionalServices\OxidConsole\Core\Application;

function outputError($e) {
    print "Oxid Professional Services Console is sorry about: \n";
    $trace = $e->getTrace();
    $cause = $trace[0];

    $result = 'Exception: "';
    $result .= $e->getMessage();
    $result .= '" @ ';
    $result .= $cause['file'].':'.$cause['line']."\n";
    if($cause['class'] != '') {
      $result .= $cause['class'];
      $result .= '->';
    }
    $result .= $cause['function'];
    $result .= "();\n";

    //console should print errors always
    print $e->getTraceAsString() . "\n";
    //shop exception handler may take care about error code and logging
}
$calls=[];    
function shutdown() {
    global $calls;
    $e = error_get_last();
    if ($e) {      
        print "Oxid Professional Services Console is sorry to be interrupted by an error:";
        print_r($e);
        print_r($calls);
    }
    print "Oxid Professional Services Console is done\n";
}

register_shutdown_function("shutdown");
declare(ticks = 1);
function tracer() {
    global $calls;
    $calls = debug_backtrace();
}

register_tick_function('tracer');


print "Oxid Professional Services consle  is called by $argv[0]\n";
$binFolder = dirname($argv[0]);
$autoloadFile = $binFolder.'/../autoload.php';

require_once $autoloadFile;
$projectRoot = realpath(dirname(dirname($binFolder)));

try {
    $application = new Application($projectRoot);
    $application->setCatchExceptions(false);
    $application->setAutoExit(false);
    $application->run();
} catch (Throwable $e) {
    outputError($e);
    throw $e;
}
