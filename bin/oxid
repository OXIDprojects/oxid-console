#!/usr/bin/env php
<?php

use OxidProfessionalServices\OxidConsole\Core\Application;

function outputError($e) {
    print "Oxid Professional Services Console is sorry about: \n";
    $trace = $e->getTrace();
    $cause = $trace[0];

    $result = 'Exception: "';
    $result .= $e->getMessage();
    $result .= '" @ ';
    $result .= $cause['file'].':'.$cause['line']."\n";
    if($cause['class'] != '') {
      $result .= $cause['class'];
      $result .= '->';
    }
    $result .= $cause['function'];
    $result .= "();\n";

    //console should print errors always
    print $e->getTraceAsString() . "\n";
    //shop exception handler may take care about error code and logging
}

function shutdown() {
    $error = error_get_last();
    if ($error['type'] === E_ERROR) {
        // fatal error has occured
        $trace = array_reverse($GLOBALS['dbg_stack']);
        array_pop($trace);
        if(php_sapi_name() == 'cli') {
            echo 'Backtrace for: \'' . $error['message'] . '\' at ' . $error['file'] . ':' . $error['line'] . ':' . "\n";
            foreach($trace as $item)
                echo '  ' . (isset($item['file']) ? $item['file'] : '<unknown file>') . ':' . (isset($item['line']) ? $item['line'] : '<unknown line>') . ' calling ' . $item['function'] . '()' . "\n";
        } else {
            echo '<p class="error_backtrace">' . "\n";
            echo '  Backtrace for: \'' . $error['message'] . '\' at ' . $error['file'] . ':' . $error['line'] . ':' . "\n";
            echo '  <ol>' . "\n";
            foreach($trace as $item)
                echo '    <li>' . (isset($item['file']) ? $item['file'] : '<unknown file>') . ':' . (isset($item['line']) ? $item['line'] : '<unknown line>') . ' calling ' . $item['function'] . '()</li>' . "\n";
            echo '  </ol>' . "\n";
            echo '</p>' . "\n";
        }
        
    }
}
register_shutdown_function('shutdown');
function write_dbg_stack() {
    $GLOBALS['dbg_stack'] = debug_backtrace();
}
register_tick_function('write_dbg_stack');
declare(ticks=1);

print "Oxid Professional Services consle  is called by $argv[0]\n";
$binFolder = dirname($argv[0]);
$autoloadFile = $binFolder.'/../autoload.php';

require_once $autoloadFile;
$projectRoot = realpath(dirname(dirname($binFolder)));

try {
    $application = new Application($projectRoot);
    $application->setCatchExceptions(false);
    $application->setAutoExit(false);
    $application->run();
} catch (Throwable $e) {
    outputError($e);
    throw $e;
}
